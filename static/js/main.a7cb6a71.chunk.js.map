{"version":3,"sources":["components/FilterSearch/FilterSearch.module.css","components/Contact/Contact.module.css","components/ContactList/ContactList.module.css","components/Container/Container.module.css","components/Form/Form.module.css","redux/Contacts/contacts-operations.js","redux/Contacts/contacts-selectors.js","components/Form/Form.js","redux/Contacts/contact-actions.js","components/FilterSearch/FilterSearch.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Container/Container.js","components/App/App.js","redux/Contacts/contacts-reducers.js","redux/store.js","index.js"],"names":["module","exports","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","contacts","addContact","contact","item","name","number","post","data","deleteContact","contactId","delete","id","getContacts","state","items","getVisibleContacts","createSelector","filter","contactsArray","filterCont","normFilter","toLowerCase","trim","includes","Form","useState","setName","setNumber","nameId","shortid","generate","telId","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","className","s","border","form","onSubmit","preventDefault","addNewContact","find","alert","label","htmlFor","input","type","pattern","title","onChange","required","button","filterContact","createAction","FilterSearch","target","Contact","span","propType","PropTypes","string","isRequired","ContactList","useEffect","map","contactBtn","onClick","Container","children","container","App","contactsList","createReducer","fulfilled","payload","contactFilter","isLoading","pending","rejected","error","action","contactsReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7cb6a71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"FilterSearch_filter__3hq5M\",\"label\":\"FilterSearch_label__TDDii\",\"input\":\"FilterSearch_input__3s2XD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"Contact_span__3Y_AK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactBtn\":\"ContactList_contactBtn__3_WEg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1Jg42\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"border\":\"Form_border___AzPs\",\"form\":\"Form_form__35Gf-\",\"label\":\"Form_label__3zB8m\",\"input\":\"Form_input__2e-u_\",\"button\":\"Form_button__AypCH\"};","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\naxios.defaults.baseURL = 'https://6195417d74c1bd00176c6c9b.mockapi.io/api/v1/';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n    'contacts/fetchContacts',\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const contacts = await axios.get('/contacts');\r\n            return contacts;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    }\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n    'contacts/addContact',\r\n    async (contact, { rejectWithValue }) => {\r\n        try {\r\n            const item = { name: contact.name, number: contact.number };\r\n            const { data } = await axios.post('/contacts', item);\r\n            return data;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    }\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n    'contacts/deleteContact',\r\n    async (contactId, { rejectWithValue }) => {\r\n        try {\r\n            const {data: {id}} =\r\n            await axios.delete(`/contacts/ ${contactId}`);\r\n            return id;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n\r\n// const fetchContacts = () => async (dispatch) => {\r\n//   dispatch(fetchContactRequest());\r\n\r\n//   try {\r\n//     const { data } = await axios.get(\"/contacts\");\r\n//     dispatch(fetchContactSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(fetchContactError(error));\r\n//   }\r\n// };\r\n\r\n\r\n// const addContact = (contact) => async (dispatch) => {\r\n//   const item = { name: contact.name, number: contact.number };\r\n\r\n//   dispatch(addContactRequest());\r\n\r\n//   try {\r\n//     const { data } = await axios.post(\"/contacts\", item);\r\n//     dispatch(addContactSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(addContactError(error));\r\n//   }\r\n// };\r\n\r\n\r\n// const deleteContact = (contactId) => async (dispatch) => {\r\n//   dispatch(deleteContactRequest());\r\n\r\n//   try {\r\n//     await axios.delete(`/contacts/${contactId}`);\r\n//     dispatch(deleteContactSuccess(contactId));\r\n//   } catch (error) {\r\n//     dispatch(deleteContactError(error));\r\n//   }\r\n// };","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContacts = (state) => state.items.data;\r\nexport const getFilter = (state) => state.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getContacts, getFilter],\r\n    (contactsArray, filterCont) => {\r\n    let normFilter = filterCont?.toLowerCase().trim();\r\n    return contactsArray?.filter(contact => contact.name.toLowerCase().trim().includes(normFilter));\r\n})\r\n    \r\n    \r\n    \r\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport s from './Form.module.css';\nimport shortid from 'shortid';\nimport { addContact } from '../../redux/Contacts/contacts-operations';\nimport { getContacts } from '../../redux/Contacts/contacts-selectors';\n\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n\n\nfunction Form() {\n  \n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = shortid.generate();\n  const telId = shortid.generate();\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  \n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const addNewContact = {\n      name,\n      number,\n    };\n    if (contacts.find(contact => contact.name === name)) {\n      alert('this contact already exists');\n      reset();\n    } else {\n      dispatch(addContact(addNewContact));\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  }\n\n    return (\n      <div className={s.border}>\n        <form className={s.form} onSubmit={handleSubmit}>\n          <label className={s.label} htmlFor={name}>\n            Name\n          </label>\n          <input\n            className={s.input}\n            value={name}\n            id={nameId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            onChange={handleChange}\n            required\n          />\n          <label className={s.label} htmlFor={number}>\n            Number\n          </label>\n          <input\n            className={s.input}\n            value={number}\n            id={telId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            onChange={handleChange}\n            required\n          />\n          <button className={s.button} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n\n\nexport default Form;\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\n// export const fetchContactRequest = createAction(\"contacts/fetchContactRequest\");\r\n// export const fetchContactSuccess = createAction(\"contacts/fetchContactSuccess\");\r\n// export const fetchContactError = createAction(\"contacts/fetchContactError\");\r\n\r\n// export const addContactRequest = createAction(\"contacts/addContactRequest\");\r\n// export const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\n// export const addContactError = createAction(\"contacts/addContactError\");\r\n\r\n// export const deleteContactRequest = createAction(\r\n//   \"contacts/deleteContactRequest\"\r\n// );\r\n// export const deleteContactSuccess = createAction(\r\n//   \"contacts/deleteContactSuccess\"\r\n// );\r\n// export const deleteContactError = createAction(\"contacts/deleteContactError\");\r\nexport const filterContact = createAction('filter/contact');","\nimport { useDispatch, useSelector } from 'react-redux';\nimport s from './FilterSearch.module.css';\nimport { filterContact } from '../../redux/Contacts/contact-actions';\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n\n\nfunction FilterSearch() {\n  const dispatch = useDispatch();\n  const value = useSelector(state => state.filter);\n  return (\n    <div className={s.filter}>\n      <label className={s.label}>Find contacts by name</label>\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        value={value}\n        onChange={(e)=>dispatch(filterContact(e.target.value))}\n        // onChange={onChange}\n      />\n    </div>\n  );\n}\n\n\nexport default FilterSearch;\n\n// const mapStateToProps = state => ({\n//   value: state.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(filterContact(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(FilterSearch);\n\n\n// FilterSearch.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func.isRequired,\n// };","import PropTypes from 'prop-types';\nimport s from './Contact.module.css';\n\nfunction Contact({ name, number }) {\n  return (\n    <>\n      <span className={s.span}>{name}:</span>\n      <span className={s.span}>{number}</span>\n    </>\n  );\n}\nContact.propType = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n};\n\nexport default Contact;\n","import React, { useEffect} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Contact from '../Contact/Contact';\r\nimport s from './ContactList.module.css';\r\nimport { deleteContact } from '../../redux/Contacts/contacts-operations';\r\nimport { fetchContacts } from '../../redux/Contacts/contacts-operations';\r\nimport { getVisibleContacts } from '../../redux/Contacts/contacts-selectors';\r\n\r\n\r\nfunction ContactList() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\r\n  const contacts = useSelector(getVisibleContacts);\r\n  \r\n  return (\r\n    <ul>\r\n      {contacts && contacts.map(({ name, number, id }) => (\r\n        <li key={id}>\r\n          <Contact name={name} number={number} />\r\n          <button\r\n            className={s.contactBtn}\r\n            type=\"button\"\r\n            onClick={()=> dispatch(deleteContact(id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n\r\nexport default ContactList;","import s from './Container.module.css';\nimport PropTypes from 'prop-types';\n\nconst Container = ({ children }) => (\n  <div className={s.container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","// import { useState } from 'react';\n// import { useLS } from '../../hooks/useLS';\nimport Form from '../Form/Form';\nimport FilterSearch from '../FilterSearch/FilterSearch';\nimport ContactList from '../ContactList/ContactList';\nimport Container from '../Container/Container';\n// import data from '../../contacts.json';\n\n\nfunction App() {\n  \n  // const [contacts, setContacts] = useLS('contacts', data)\n  // const [filter, setFilter] = useState('');\n\n\n  // const handlerInputContacts = data => {\n  //   const searchingName = contacts.some(\n  //     element => element.name.toLowerCase() === data.name.toLowerCase(),\n  //   );\n\n  //   if (searchingName) {\n  //     return alert(`this contact already exists`);\n  //   }\n\n  //   setContacts([...contacts, data]);\n  // };\n\n  // const searchingContacts = e => {\n  //   setFilter(e.target.value );\n  // };\n\n  // const getVisibleContacts = () => {\n  //   return contacts.filter(contacts =>\n  //     contacts.name.toLowerCase().includes(filter.toLowerCase()),\n  //   );\n  // };\n\n  // const deleteContact = contactId => {\n  //   setContacts(contacts.filter(contact => contact.id !== contactId)\n  //   );\n  // };\n\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <Form  />\n        <h2>Contacts</h2>\n        <FilterSearch />\n        <ContactList\n          // contacts={getVisibleContacts()}\n          // onDeleteContact={deleteContact}\n        />\n      </Container>\n    );\n  }\n\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { filterContact } from \"./contact-actions\";\r\nimport { fetchContacts, addContact, deleteContact } from \"./contacts-operations\";\r\n\r\n\r\n\r\nconst contactsList = createReducer([], {\r\n    [fetchContacts.fulfilled]:(_, {payload})=>payload,\r\n    [addContact.fulfilled]: (state, { payload }) => {\r\n        return [...state, payload];\r\n    },\r\n    [deleteContact.fulfilled]: (state, { payload }) =>\r\n        state.filter(({id}) => id !== payload)\r\n});\r\n\r\nconst contactFilter = createReducer('', {\r\n    [filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nconst isLoading = createReducer(false, {\r\n    [fetchContacts.pending]: () => true,\r\n    [fetchContacts.fulfilled]: () => false,\r\n    [fetchContacts.rejected]: () => false,\r\n    [addContact.pending]: () => true,\r\n    [addContact.fulfilled]: () => false,\r\n    [addContact.rejected]: () => false,\r\n    [deleteContact.pending]: () => true,\r\n    [deleteContact.fulfilled]: () => false,\r\n    [deleteContact.rejected]: () => false,\r\n})\r\n\r\nconst error = createReducer(null, {\r\n    [fetchContacts.rejected]: (_, action) => action.payload,\r\n    [fetchContacts.pending]: () => null,\r\n});\r\n\r\nexport const contactsReducer = combineReducers({\r\n    items: contactsList,\r\n    filter: contactFilter,\r\n    isLoading,\r\n    error,\r\n})\r\n\r\n","import { configureStore} from '@reduxjs/toolkit';\r\nimport { contactsReducer } from './Contacts/contacts-reducers';\r\nimport {\r\n    // persistStore,\r\n    // persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage'\r\n\r\n// const persistConfig = {\r\n//     key: \"contacts\",\r\n//     storage,\r\n//     blacklist: ['filter'],\r\n// };\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: contactsReducer,\r\n    // middleware: (getDefaultMiddleware) =>\r\n    //     getDefaultMiddleware({\r\n    //         serializableCheck: {\r\n    //             ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    //         },\r\n    //     }),\r\n});\r\n\r\n// export const persistor = persistStore(store)\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n//  импорт компонента Provider\nimport { Provider } from 'react-redux';\n//  импорт объекта глобального состояния\nimport { store } from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} > */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}