{"version":3,"sources":["components/FilterSearch/FilterSearch.module.css","components/Contact/Contact.module.css","components/ContactList/ContactList.module.css","components/Container/Container.module.css","redux/Contacts/contact-actions.js","components/Form/Form.js","components/FilterSearch/FilterSearch.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Container/Container.js","components/App/App.js","redux/Contacts/contacts-reducers.js","redux/store.js","index.js","components/Form/Form.module.css"],"names":["module","exports","addContact","createAction","deleteContact","filterContact","Form","useState","name","setName","number","setNumber","nameId","shortid","generate","telId","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","className","s","border","form","onSubmit","preventDefault","addNewContact","id","label","htmlFor","input","type","pattern","title","onChange","required","button","FilterSearch","useSelector","state","filter","target","Contact","span","propType","PropTypes","string","isRequired","ContactList","contacts","items","contact","toLowerCase","includes","getVisibleContacts","map","contactBtn","onClick","Container","children","container","App","contactsList","createReducer","payload","find","alert","contactFilter","_","contactsReducer","combineReducers","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.8fa37718.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"FilterSearch_filter__3hq5M\",\"label\":\"FilterSearch_label__TDDii\",\"input\":\"FilterSearch_input__3s2XD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"Contact_span__3Y_AK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactBtn\":\"ContactList_contactBtn__3_WEg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1Jg42\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n// export const addContact = data => ({\r\n//     type: 'contact/add',\r\n//     payload: data,\r\n// });\r\n\r\n// export const deleteContact = id => ({\r\n//     type: 'contact/delete',\r\n//     payload: id,\r\n// });\r\n\r\n// export const filterContact = value => ({\r\n//     type: 'filter/contact,\r\n//     payload: value,\r\n// });\r\n\r\nexport const addContact = createAction('contact/add');\r\nexport const deleteContact = createAction('contact/delete');\r\nexport const filterContact = createAction('filter/contact');","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport s from './Form.module.css';\nimport shortid from 'shortid';\nimport { addContact } from '../../redux/Contacts/contact-actions';\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n\n\nfunction Form() {\n  \n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = shortid.generate();\n  const telId = shortid.generate();\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const addNewContact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    // onSubmit(addNewContact);\n    dispatch(addContact(addNewContact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  }\n\n    return (\n      <div className={s.border}>\n        <form className={s.form} onSubmit={handleSubmit}>\n          <label className={s.label} htmlFor={name}>\n            Name\n          </label>\n          <input\n            className={s.input}\n            value={name}\n            id={nameId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            onChange={handleChange}\n            required\n          />\n          <label className={s.label} htmlFor={number}>\n            Number\n          </label>\n          <input\n            className={s.input}\n            value={number}\n            id={telId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            onChange={handleChange}\n            required\n          />\n          <button className={s.button} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n\n// Form.propTypes = {\n//   name: PropTypes.string,\n//   number: PropTypes.number,\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onSubmit: data =>dispatch(addContact(data)),\n//   }\n// };\n// export default connect(null, mapDispatchToProps)(Form);\n\n\nexport default Form;\n","\nimport { useDispatch, useSelector } from 'react-redux';\nimport s from './FilterSearch.module.css';\nimport { filterContact } from '../../redux/Contacts/contact-actions';\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n\n\nfunction FilterSearch() {\n  const dispatch = useDispatch();\n  const value = useSelector(state => state.filter);\n  return (\n    <div className={s.filter}>\n      <label className={s.label}>Find contacts by name</label>\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        value={value}\n        onChange={(e)=>dispatch(filterContact(e.target.value))}\n        // onChange={onChange}\n      />\n    </div>\n  );\n}\n\n\nexport default FilterSearch;\n\n// const mapStateToProps = state => ({\n//   value: state.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(filterContact(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(FilterSearch);\n\n\n// FilterSearch.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func.isRequired,\n// };","import PropTypes from 'prop-types';\nimport s from './Contact.module.css';\n\nfunction Contact({ name, number }) {\n  return (\n    <>\n      <span className={s.span}>{name}:</span>\n      <span className={s.span}>{number}</span>\n    </>\n  );\n}\nContact.propType = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Contact from '../Contact/Contact';\nimport s from './ContactList.module.css';\nimport { deleteContact } from '../../redux/Contacts/contact-actions';\n\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n\nfunction ContactList() {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(state => state.items);\n  const value = useSelector(state => state.filter);\n\n  const getVisibleContacts = (contacts, filter) => {\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n  \n  return (\n    <ul>\n      {getVisibleContacts(contacts, value).map(({ name, number, id }) => (\n        <li key={id}>\n          <Contact name={name} number={number} />\n          <button\n            className={s.contactBtn}\n            type=\"button\"\n            // onClick={()=>onDeleteContact(id)}\n            onClick={()=> dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// const getVisibleContacts = (contacts, filter) => {\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n// };\n\n// const mapStateToProps = ({   items, filter }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: dataId=> dispatch(deleteContact(dataId))\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//     }),\n//   ),\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n\nexport default ContactList;","import s from './Container.module.css';\nimport PropTypes from 'prop-types';\n\nconst Container = ({ children }) => (\n  <div className={s.container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","// import { useState } from 'react';\n// import { useLS } from '../../hooks/useLS';\nimport Form from '../Form/Form';\nimport FilterSearch from '../FilterSearch/FilterSearch';\nimport ContactList from '../ContactList/ContactList';\nimport Container from '../Container/Container';\n// import data from '../../contacts.json';\n\n\nfunction App() {\n  \n  // const [contacts, setContacts] = useLS('contacts', data)\n  // const [filter, setFilter] = useState('');\n\n\n  // const handlerInputContacts = data => {\n  //   const searchingName = contacts.some(\n  //     element => element.name.toLowerCase() === data.name.toLowerCase(),\n  //   );\n\n  //   if (searchingName) {\n  //     return alert(`this contact already exists`);\n  //   }\n\n  //   setContacts([...contacts, data]);\n  // };\n\n  // const searchingContacts = e => {\n  //   setFilter(e.target.value );\n  // };\n\n  // const getVisibleContacts = () => {\n  //   return contacts.filter(contacts =>\n  //     contacts.name.toLowerCase().includes(filter.toLowerCase()),\n  //   );\n  // };\n\n  // const deleteContact = contactId => {\n  //   setContacts(contacts.filter(contact => contact.id !== contactId)\n  //   );\n  // };\n\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <Form  />\n        <h2>Contacts</h2>\n        <FilterSearch />\n        <ContactList\n          // contacts={getVisibleContacts()}\n          // onDeleteContact={deleteContact}\n        />\n      </Container>\n    );\n  }\n\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact, filterContact } from \"./contact-actions\";\r\n\r\nconst initState = [\r\n    { \"id\": \"id-1\", \"name\": \"Rosie Simpson\", \"number\": \"459-12-56\" },\r\n    { \"id\": \"id-2\", \"name\": \"Hermione Kline\", \"number\": \"443-89-12\" },\r\n    { \"id\": \"id-3\", \"name\": \"Eden Clements\", \"number\": \"645-17-79\" },\r\n    { \"id\": \"id-4\", \"name\": \"Annie Copeland\", \"number\": \"227-91-26\" }\r\n];\r\n\r\nconst contactsList = createReducer(initState, {\r\n    [addContact]: (state, { payload }) => {\r\n        if (state.find(contact => contact.name === payload.name)) {\r\n            alert('this contact already exists');\r\n            return state;\r\n        } else {\r\n            return [...state, payload];\r\n        }\r\n    },\r\n    \r\n    [deleteContact]: (state, { payload }) => state.filter(contact => contact.id !== payload)\r\n});\r\n\r\nconst contactFilter = createReducer('', {\r\n    [filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport const contactsReducer = combineReducers({\r\n    items: contactsList,\r\n    filter: contactFilter,\r\n})\r\n\r\n// const contactsList = (state = initState, action) => {\r\n//     switch (action.type) {\r\n//         case ADD_CONTACT:\r\n//             return [...state, action.payload];\r\n//         case DELETE_CONTACT:\r\n//             return state.filter(contact => contact.id !== action.payload);\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n// const contactFilter = (state = \"\", {payload}) => {\r\n//     return payload;\r\n// }\r\n","import { configureStore} from '@reduxjs/toolkit';\r\nimport { contactsReducer } from './Contacts/contacts-reducers';\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst persistConfig = {\r\n    key: \"contacts\",\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: persistReducer(persistConfig, contactsReducer),\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware({\r\n            serializableCheck: {\r\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n            },\r\n        }),\r\n});\r\n\r\nexport const persistor = persistStore(store)\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n//  импорт компонента Provider\nimport { Provider } from 'react-redux';\n//  импорт объекта глобального состояния\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"border\":\"Form_border___AzPs\",\"form\":\"Form_form__35Gf-\",\"label\":\"Form_label__3zB8m\",\"input\":\"Form_input__2e-u_\",\"button\":\"Form_button__AypCH\"};"],"sourceRoot":""}